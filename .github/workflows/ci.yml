name: CI Pipeline

# Когда запускать workflow
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Задачи (jobs)
jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    steps:
    # Шаг 1: Скачиваем код из репозитория
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Шаг 2: Устанавливаем Python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    # Шаг 3: Кешируем зависимости для ускорения
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # Шаг 4: Устанавливаем зависимости
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    # Шаг 5: Проверяем стиль кода с помощью flake8
    - name: Lint with flake8
      run: |
        # Останавливаем сборку при синтаксических ошибках или неопределенных именах
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Предупреждения о стиле кода (не останавливают сборку)
        flake8 . --count --max-line-length=88 --statistics
    
    # Шаг 6: Проверяем форматирование кода с помощью black
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    # Шаг 7: Проверяем типы с помощью mypy
    - name: Type check with mypy
      run: |
        mypy file_analyzer/ --ignore-missing-imports
    
    # Шаг 8: Запускаем тесты с покрытием
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=file_analyzer --cov-report=xml --cov-report=html
    
    # Шаг 9: Загружаем отчет о покрытии в Codecov (опционально)
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Дополнительная задача: тестирование в Docker
  docker-test:
    runs-on: ubuntu-latest
    needs: test  # Запускается только если тесты прошли

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t file-analyzer:${{ github.sha }} .
        docker build -t file-analyzer:latest .

    - name: Test in Docker container
      run: |
        docker run --rm file-analyzer:latest

    - name: Test file analysis in Docker
      run: |
        # Создаем тестовые файлы для анализа
        mkdir -p test-data
        echo "print('Hello from Python')" > test-data/test.py
        echo "Some text content" > test-data/readme.txt
        
        # Запускаем анализ в контейнере (без создания отчета)
        docker run --rm -v $PWD/test-data:/data file-analyzer:latest \
          python -c "
            from file_analyzer.analyzer import FileAnalyzer
            analyzer = FileAnalyzer('/data')
            stats = analyzer.get_file_stats()
            print(f'Найдено файлов: {stats[\"total_files\"]}')
            print(f'Типы: {stats[\"extensions_count\"]}')
            files = analyzer.get_files_by_extension(['.py'])
            print(f'Python файлы: {len(files.get(\".py\", []))}')
        "


  # Дополнительная задача: проверка безопасности
  security:
    runs-on: ubuntu-latest
    needs: test  # Запускается только если тесты прошли
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install safety
      run: pip install safety
    
    # Проверяем известные уязвимости в зависимостях
    - name: Check for security vulnerabilities
      run: |
        pip freeze | safety check --json || echo "Some vulnerabilities found, check logs"