name: CI Pipeline

# –ö–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å workflow
on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]  # –î–ª—è —Ä–µ–ª–∏–∑–æ–≤
  pull_request:
    branches: [ main ]

# –ó–∞–¥–∞—á–∏ (jobs)
jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    # –®–∞–≥ 1: –°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    - name: Checkout code
      uses: actions/checkout@v4

    # –®–∞–≥ 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # –®–∞–≥ 3: –ö–µ—à–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # –®–∞–≥ 4: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª—å –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é flake8
    - name: Lint with flake8
      run: |
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–±–æ—Ä–∫—É –ø—Ä–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω–∞—Ö
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å—Ç–∏–ª–µ –∫–æ–¥–∞ (–Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —Å–±–æ—Ä–∫—É)
        flake8 . --count --max-line-length=88 --statistics

    # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é black
    - name: Check code formatting with black
      run: |
        black --check --diff .

    # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Å –ø–æ–º–æ—â—å—é mypy
    - name: Type check with mypy
      run: |
        mypy file_analyzer/ --ignore-missing-imports

    # –®–∞–≥ 8: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=file_analyzer --cov-report=xml --cov-report=html

    # –®–∞–≥ 9: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –≤ Codecov (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Docker
  docker-test:
    runs-on: ubuntu-latest
    needs: test  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t file-analyzer:${{ github.sha }} .
        docker build -t file-analyzer:latest .

    - name: Test in Docker container
      run: |
        docker run --rm file-analyzer:latest

    - name: Test file analysis in Docker
      run: |
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        mkdir -p test-data
        echo "print('Hello from Python')" > test-data/test.py
        echo "Some text content" > test-data/readme.txt
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        docker run --rm -v $PWD/test-data:/data file-analyzer:latest python -c "
        import sys
        sys.path.insert(0, '/app')
        from file_analyzer.analyzer import FileAnalyzer
        analyzer = FileAnalyzer('/data')
        stats = analyzer.get_file_stats()
        print('–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:', stats['total_files'])
        print('–¢–∏–ø—ã:', stats['extensions_count'])
        files = analyzer.get_files_by_extension(['.py'])
        print('Python —Ñ–∞–π–ª—ã:', len(files.get('.py', [])))
        "


  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  security:
    runs-on: ubuntu-latest
    needs: test  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install safety
      run: pip install safety

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
    - name: Check for security vulnerabilities
      run: |
        pip freeze | safety check --json || echo "Some vulnerabilities found, check logs"

  # Deployment: –ø—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–∞
  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker-test, security]  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # –¢–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/file-analyzer
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Release: —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–µ–≥–∞
  release:
    runs-on: ubuntu-latest
    needs: deploy
    if: startsWith(github.ref, 'refs/tags/v')  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–≥–æ–≤ –≤–µ—Ä—Å–∏–π

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          üöÄ **File Analyzer ${{ github.ref }}**
          
          ## üì¶ Docker Image
          ```bash
          docker pull ghcr.io/${{ github.repository }}/file-analyzer:latest
          docker run -v /path/to/analyze:/data ghcr.io/${{ github.repository }}/file-analyzer:latest python -m file_analyzer.analyzer /data
          ```
          
          ## üìã Changes
          - Automated release via GitHub Actions
          - Docker image published to GitHub Container Registry
          - Full CI/CD pipeline with tests and security checks
        draft: false
        prerelease: false